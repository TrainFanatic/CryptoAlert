NOTE 1: USING THE PASTE UTITLITY TO MAKE LIFE EASIER
Here are some notes:
Using the `paste' ability, I was able to turn file filtered3 into file filtered5
It turns the file containing the series of:

	id
	name

into:

	id:name

This is extremely helpful because it is hard to find a way to call id and name as pair in the first format, while in the second format, you can do it by simply doing `cat file |  cut -d: -f$i' where $i is 1 for id and 2 for name
This was done by doing:

	cat filtered3 | paste -d ':' - - > filtered5

The file filtered4 was made sheepishly (and sort of dumbly) by doing these two commands

	cat filtered3 | paste -d ' ' - - > filtered4
	cat filtered4 | tr ' ' ':' > filtered5
or similarly, instead of doing the second command (cat | tr)
	tr ' ' ':' < filtered4 > filtered5
END NOTE
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––

NOTE 2: HOW TO MAKE IT USR/BIN COMPATIBLE?
It is possible to make the actual executable only contain the following:
	osascript CryptoScript (The applescript)
The name of this executable HAS to be 'cryptoalert' as we want it to be able to be executed from usr/bin
You should be able to execute it like this after putting the executable, applescript, and dependencies into usr/bin
	cryptoalert

2a. Proposal for structure of Maker File
It appears that the most popular way to do this is by using the GNU Make
But for the sake of people that don't know that they have to open Terminal and cd to the directory and type in `make', just make an executable.
i.
	The executable must be Finder double-clickable.
	It must not contain commands that are brew or mandatory-install.
		like osascript, osacompile, bash built-ins, and echo (for user input)
ii.
It should go something like this:
	Ask user for Desktop Application or command-line utility
		if Application then
			do osacompile -o ~/Desktop/CryptoAlert.app CryptoAlert
			(This makes an application)
		if command-line utility
			either:
				1) Have the old shell cryptoAlert and make THAT the executable
				OR
				2) Make a seperate executable which runs the applescript
			(It appears option 1 is more favorable)

